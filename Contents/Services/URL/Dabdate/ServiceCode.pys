WINDOWS_HEADERS = {'User-Agent': 'Mozilla/5.0 (MSIE 9.0; Windows NT 6.1; Trident/5.0)'}
IPAD_HEADERS = {'User-Agent': 'Mozilla/5.0 (iPad; U; CPU OS 4_3 like Mac OS X; en-us) Mobile'}

RE_TITLE = Regex('<font class=big>([^<]*)</font>')
RE_VIDEO_URL = Regex('file: *"(.*)",')

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):
	if url.startswith('http://m.'):
		headers = IPAD_HEADERS
	else:
		headers = WINDOWS_HEADERS
	try:
		page = HTTP.Request(url, headers=headers).content.decode('euc-kr')
	except:
		raise Ex.MediaNotAvailable

	# check login button
	if 'paypal.php' in page:
		Log.Debug(u"Login is required")
		if not Prefs['user_id'] or not Prefs['user_passwd']:
			return MessageContainer('Error', 'require Login info')
		values = {
			'mode': 'login',
			'url' : url,
			'id'  : Prefs['user_id'],
			'pass': Prefs['user_passwd']
		}
		w_url = url[ : url.find('/',8)]+'/login.php'
		try:
			page = HTTP.Request(w_url, headers=headers, values=values).content.decode('euc-kr')
		except:
			raise Ex.MediaExpired

	try:
		title = RE_TITLE.search(page).group(1)
	except:
		title = None
		Log.Debug(page)

	return VideoClipObject(
		title = title
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = Callback(PlayVideo, url=url)
				)
			],
			video_resolution = 'sd',
			audio_channels = 2,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			optimized_for_streaming = True
		)
	]

####################################################################################################
def PlayVideo(url):
	if url.startswith('http://m.'):
		headers = IPAD_HEADERS
	else:
		headers = WINDOWS_HEADERS
	try:
		page = HTTP.Request(url, headers=headers).content
	except:
		raise Ex.MediaNotAvailable
	# accept OK
	if 'msg.php' in page:
		Log.Debug('accept Payment')
		values = {
			'mode': 'auto',
			'mno' : '',
			'url' : url,
			'auto': '0'
		}
		headers['Referer'] = url
		w_url = url[ : url.find('/',8)]+'/msg.php'
		try:
			page = HTTP.Request(w_url, values=values, headers=headers).content
		except:
			raise Ex.MediaExpired

	try:
		video_url = RE_VIDEO_URL.search(page).group(1)
	except:
		raise Ex.MediaNotAvailable
	return Redirect(video_url)
